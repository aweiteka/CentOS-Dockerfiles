###
# This is a Jenkins Job builder template for creating jenkins jobs.
# It is not a Jenkins plugin. It is a CLI tool that parses a yaml file
# and uploads job XML to a jenkins server. It allows jenkins jobs to be
# developed outside of the Jenkins web UI and kept under version control.
# Documentation: http://docs.openstack.org/infra/jenkins-job-builder/
#
# 1. Place a copy of this file and the config directory to your source repository
# 2. Edit the global parameters and config/jenkins-jobs.ini file
# 3. Run jenkins-jobs CLI to upload XML to your jenkins master
#    jenkins-jobs --conf config/jenkins-jobs.ini --ignore-cache update jenkins-jobs.yaml
# 4. Once you're satisfied, commit and push. jenkins-jobs will be run each time the repo changes
###

###
# Edit these values for your project.
###
- defaults:
    name: global
    mail-to: aweiteka@redhat.com
    description: >
        A jenkins-jobs template to create jobs in Jenkins.
        Do not edit this job through the web user interface.
    ose-uri: 10.18.41.75
    ose-username: test
    ose-password: test
    ose-insecure: true
    # output of `oc whoami -t` -- session token, this appears to expire quickly
    #ose-api-auth-token: <token>
    ose-project-namespace: test
    ose-imagestream-name: centos
    ose-image-name: httpd
    context-dir: httpd/centos7
    ose-image-tag-major-version: 1
    ose-image-tag-build-number: 3
    ose-image-tag-increment: 1
# If you have more than once source repository copy the scm section
# edit and use the name value to use it in your job
- scm:
    name: dockerfile
    scm:
      - git:
          url: 'https://github.com/aweiteka/CentOS-Dockerfiles.git'
          branches:
           - origin/jenkins
          skip-tag: true

###
# End edit values
###

- project:
   name: automated-builds
   jobs:
    # update this list if you add or remove a job-template
    - 'dockerfile-lint-test'
    - 'build-image'
    - 'functional-test'
    - 'promote-image-tag'
    - 'refresh-imagestreams'
    - 'update-jobs-from-yaml'
    - 'image-scan'
    # - 'submit-certification'
    # - 'push-to-external-registry'
    #- 'unit-test'

- job-template:
    name: 'unit-test'
    description: "OPTIONAL: Run source unit tests"
    builders:
      - shell: 'sudo pip install -r requirements.txt'
      - shell: 'sudo pip install pytest-cov coveralls'
      - shell: 'sudo python -m pytest -vv tests --cov atomicapp --cov-report=xml --junit-xml=result.xml'
    publishers:
    - archive:
        artifacts: '**/**'
        allow-empty: 'true'
    scm:
      - dockerfile

- job-template:
    name: 'functional-test'
    description: Run functional tests on deployed container
    builders:
      - shell: curl localhost:80
    publishers:
    - archive:
        artifacts: '**/**'
        allow-empty: 'true'
    scm:
      - dockerfile

###
# Service jobs
# You typically will not need to edit anything below
###

- job-template:
    name: 'refresh-imagestreams'
    description: Update OpenShift imagestreams to detect upstream image changes
    builders:
      - shell: oc login -u {ose-username} -p {ose-password} -n {ose-project-namespace} --insecure-skip-tls-verify={ose-insecure} {ose-uri}
      - shell: 'oc import-image {ose-imagestream-name}'
    triggers:
      - timed: '@hourly'

- job-template:
    name: 'build-image'
    description: Start a build in OpenShift
    scm:
      - dockerfile
    triggers:
      # run job if repo changes or if the image-scan job fails
      - pollscm: "H/5 * * * *"
      - build-result:
          groups:
          - jobs:
            - image-scan
            results:
            - failure
    builders:
      - shell: |
          #!/bin/bash -x

          ###
          # kicking off the build exits immediately
          # follow the logs but the log tail succeeds even if the build fails
          # grab the success-fail of the actual build
          ###

          oc login -u {ose-username} -p {ose-password} \
                   -n {ose-project-namespace} \
                   --insecure-skip-tls-verify={ose-insecure} \
                   {ose-uri}
          BUILD=$(oc start-build {ose-image-name}-build)
          sleep 10
          oc build-logs $BUILD -f
          # escape brackets with yet another bracket for jjb compatibility
          BUILD_STATUS=$(oc get builds $BUILD -o template -t {{{{.status.phase}}}})
          count=1
          attempts=10
          while [ $BUILD_STATUS == "Running" -a $count -lt $attempts ]; do
            echo "Waiting for build status to complete, attempt $count/$attempts"
            sleep 5
            BUILD_STATUS=$(oc get builds $BUILD -o template -t {{{{.status.phase}}}})
            if [[ $BUILD_STATUS == "Failed" ]]; then
              oc get builds $BUILD -o yaml
              echo "Build status: $BUILD_STATUS"
              exit 1
            elif [[ $BUILD_STATUS == "Success" ]]; then
              echo "Build success"
              exit 0
            fi
            count=$(($count+1))

          done
          echo "Build has timed out, attempt $count/$attempts."
          exit 1

- job-template:
    name: 'image-scan'
    description: Placeholder job to scan image for vulnerabilities FIXME
    builders:
      - shell: echo "true"
    triggers:
      - timed: '@hourly'

- job-template:
    name: 'dockerfile-lint-test'
    description: Check Dockerfile using dockerfile_lint tool
    scm:
      - dockerfile
    triggers:
      - pollscm: "H/5 * * * *"
    builders:
      - shell: 'sudo yum install -y npm'
      - shell: 'sudo npm install git+https://github.com/projectatomic/dockerfile_lint'
      - shell: 'sudo /root/node_modules/dockerfile_lint/bin/dockerfile_lint -f {context-dir}/Dockerfile'

- job-template:
    name: 'promote-image-tag'
    description: Promote image using tag
    triggers:
    - build-result:
        groups:
          - jobs:
            - functional-test
    builders:
      - shell: oc login -u {ose-username} -p {ose-password} -n {ose-project-namespace} --insecure-skip-tls-verify={ose-insecure} {ose-uri}
      - shell: oc tag {ose-image-name}:{ose-image-tag-major-version}-{ose-image-tag-build-number} {ose-image-name}:{ose-image-tag-major-version}-`expr {ose-image-tag-build-number} + {ose-image-tag-increment}`

- job-template:
    name: 'update-jobs-from-yaml'
    description: >
        Updates jenkins jobs from the Jenkins Job builder yaml file checked into scm.
        This job creates or updates other jobs. It's the mother of all jobs.
    scm:
      - dockerfile
    triggers:
      - pollscm: "H/5 * * * *"
    builders:
        - shell: 'jenkins-jobs --conf {context-dir}/config/jenkins-jobs.ini --ignore-cache update -r --delete-old {context-dir}/jenkins-jobs.yaml'

